<?xml version="1.0" ?>
<!-- =================================================================================== -->
<!-- |    This document was autogenerated by xacro from model.urdf.xacro               | -->
<!-- |    EDITING THIS FILE BY HAND IS NOT RECOMMENDED                                 | -->
<!-- =================================================================================== -->
<robot name="bender" xmlns:xacro="http://ros.org/wiki/xacro">
  <robotBaseFrame>base_link</robotBaseFrame>
  <material name="white">
    <color rgba="1 1 1 1.5"/>
  </material>
  <link name="base_link">
    <visual>
      <geometry>
        <box size="0.9 0.56 0.71"/>
      </geometry>
      <material name="white"/>
    </visual>
    <collision>
      <geometry>
        <box size="0.9 0.56 0.71"/>
      </geometry>
    </collision>
    <inertial>
      <mass value="15.0"/>
      <inertia ixx="1.0" ixy="0.0" ixz="0.0" iyy="1.0" iyz="0.0" izz="1.0"/>
    </inertial>
  </link>
  <!-- Creating the actual robot -->
  <joint name="front_caster_joint" type="fixed">
    <parent link="base_link"/>
    <child link="front_caster"/>
    <axis xyz="0 0 1"/>
    <origin rpy="1.57079632679 0 0" xyz="0.28 0 -0.355"/>
  </joint>
  <link name="front_caster">
    <visual>
      <geometry>
        <sphere radius="0.15"/>
      </geometry>
      <material name="white"/>
    </visual>
    <collision>
      <geometry>
        <sphere radius="0.15"/>
      </geometry>
    </collision>
    <inertial>
      <mass value="2.5"/>
      <inertia ixx="1.0" ixy="0.0" ixz="0.0" iyy="1.0" iyz="0.0" izz="1.0"/>
    </inertial>
  </link>
  <!-- This block provides the simulator (Gazebo) with information on a few additional
physical properties. See http://gazebosim.org/tutorials/?tut=ros_urdf for more-->
  <gazebo reference="front_caster">
    <mu1 value="0.0"/>
    <mu2 value="0.0"/>
    <kp value="10000000.0"/>
    <kd value="1.0"/>
    <material>Gazebo/Grey/</material>
  </gazebo>
  <joint name="back_caster_joint" type="fixed">
    <parent link="base_link"/>
    <child link="back_caster"/>
    <axis xyz="0 0 1"/>
    <origin rpy="1.57079632679 0 0" xyz="-0.28 0 -0.355"/>
  </joint>
  <link name="back_caster">
    <visual>
      <geometry>
        <sphere radius="0.15"/>
      </geometry>
      <material name="white"/>
    </visual>
    <collision>
      <geometry>
        <sphere radius="0.15"/>
      </geometry>
    </collision>
    <inertial>
      <mass value="2.5"/>
      <inertia ixx="1.0" ixy="0.0" ixz="0.0" iyy="1.0" iyz="0.0" izz="1.0"/>
    </inertial>
  </link>
  <!-- This block provides the simulator (Gazebo) with information on a few additional
physical properties. See http://gazebosim.org/tutorials/?tut=ros_urdf for more-->
  <gazebo reference="back_caster">
    <mu1 value="0.0"/>
    <mu2 value="0.0"/>
    <kp value="10000000.0"/>
    <kd value="1.0"/>
    <material>Gazebo/Grey/</material>
  </gazebo>
  <joint name="right_wheel_joint" type="continuous">
    <parent link="base_link"/>
    <child link="right_wheel"/>
    <axis xyz="0 0 1"/>
    <origin rpy="-1.57079632679 0 0" xyz="0 -0.28 -0.355"/>
  </joint>
  <link name="right_wheel">
    <visual>
      <geometry>
        <cylinder length="0.1" radius="0.15"/>
      </geometry>
      <material name="white"/>
    </visual>
    <collision>
      <geometry>
        <cylinder length="0.1" radius="0.15"/>
      </geometry>
    </collision>
    <inertial>
      <mass value="3.5"/>
      <inertia ixx="1.0" ixy="0.0" ixz="0.0" iyy="1.0" iyz="0.0" izz="1.0"/>
    </inertial>
  </link>
  <!-- This block provides the simulator (Gazebo) with information on a few additional
physical properties. See http://gazebosim.org/tutorials/?tut=ros_urdf for more-->
  <gazebo reference="right_wheel">
    <mu1 value="200.0"/>
    <mu2 value="100.0"/>
    <kp value="1000000.0"/>
    <kd value="1.0"/>
    <fdir1 value="1 0 0"/>
    <material>Gazebo/Grey/</material>
  </gazebo>
  <!-- This block connects the wheel joint to an actuator (motor), which informs both
   simulation and visualization of the robot -->
  <transmission name="right_wheel_trans">
    <type>transmission_interface/SimpleTransmission</type>
    <actuator name="right_wheel_motor">
      <mechanicalReduction>1</mechanicalReduction>
    </actuator>
    <joint name="right_wheel_joint">
      <hardwareInterface>hardware_interface/VelocityJointInterface</hardwareInterface>
    </joint>
  </transmission>
  <joint name="left_wheel_joint" type="continuous">
    <parent link="base_link"/>
    <child link="left_wheel"/>
    <axis xyz="0 0 1"/>
    <origin rpy="-1.57079632679 0 0" xyz="0 0.28 -0.355"/>
  </joint>
  <link name="left_wheel">
    <visual>
      <geometry>
        <cylinder length="0.1" radius="0.15"/>
      </geometry>
      <material name="white"/>
    </visual>
    <collision>
      <geometry>
        <cylinder length="0.1" radius="0.15"/>
      </geometry>
    </collision>
    <inertial>
      <mass value="3.5"/>
      <inertia ixx="1.0" ixy="0.0" ixz="0.0" iyy="1.0" iyz="0.0" izz="1.0"/>
    </inertial>
  </link>
  <!-- This block provides the simulator (Gazebo) with information on a few additional
physical properties. See http://gazebosim.org/tutorials/?tut=ros_urdf for more-->
  <gazebo reference="left_wheel">
    <mu1 value="200.0"/>
    <mu2 value="100.0"/>
    <kp value="1000000.0"/>
    <kd value="1.0"/>
    <fdir1 value="1 0 0"/>
    <material>Gazebo/Grey/</material>
  </gazebo>
  <!-- This block connects the wheel joint to an actuator (motor), which informs both
   simulation and visualization of the robot -->
  <transmission name="left_wheel_trans">
    <type>transmission_interface/SimpleTransmission</type>
    <actuator name="left_wheel_motor">
      <mechanicalReduction>1</mechanicalReduction>
    </actuator>
    <joint name="left_wheel_joint">
      <hardwareInterface>hardware_interface/VelocityJointInterface</hardwareInterface>
    </joint>
  </transmission>
  <!-- Gazebo plugin for ROS Control -->
  <gazebo>
    <plugin filename="libgazebo_ros_control.so" name="gazebo_ros_control">
      <robotNamespace>/</robotNamespace>
    </plugin>
  </gazebo>
  <!-- Gazebo plugin for GPS data -->
  <gazebo>
    <plugin filename="libhector_gazebo_ros_gps.so" name="gps_controller">
      <alwayson>true</alwayson>
      <updaterate>1.0</updaterate>
      <bodyname>base_link</bodyname>
      <topicname>/fix</topicname>
      <velocitytopicname>/fix_velocity</velocitytopicname>
      <drift>5.0 5.0 5.0</drift>
      <gaussiannoise>0.1 0.1 0.1</gaussiannoise>
      <velocitydrift>0 0 0</velocitydrift>
      <velocitygaussiannoise>0.1 0.1 0.1</velocitygaussiannoise>
    </plugin>
  </gazebo>
  <!-- Vision Camera -->
  <link name="camera_link">
    <visual>
      <origin rpy="0 0 0" xyz="0 0 0"/>
      <geometry>
        <box size="0.25 0.25 0.25"/>
      </geometry>
    </visual>
  </link>
  <joint name="camera_joint" type="fixed">
    <origin rpy="0 0.523598775598 0" xyz="0 0 1.71"/>
    <parent link="base_link"/>
    <child link="camera_link"/>
  </joint>
  <gazebo reference="camera_link">
    <sensor name="camera" type="camera">
      <update_rate>30.0</update_rate>
      <camera name="head">
        <horizontal_fov>1.3962634</horizontal_fov>
        <image>
          <width>752</width>
          <height>480</height>
          <format>L8</format>
        </image>
        <clip>
          <near>0.02</near>
          <far>300</far>
        </clip>
        <!--noise>
            <type>gaussian</type>
            < Noise is sampled independently per pixel on each frame.
                 That pixel's noise value is added to each of its color
                 channels, which at that point lie in the range [0,1]. >
            <mean>0.0</mean>
            <stddev>0.007</stddev>
          </noise-->
      </camera>
      <!-- Code to use a single monocular camera plugin
        <plugin name="camera_controller" filename="libgazebo_ros_camera.so">
          <alwaysOn>true</alwaysOn>
          <updateRate>0.0</updateRate>
          <cameraName>camera</cameraName>
          <imageTopicName>image_raw</imageTopicName>
          <cameraInfoTopicName>camera_info</cameraInfoTopicName>
          <frameName>camera_link</frameName>
          <hackBaseline>0.07</hackBaseline>
          <distortionK1>0.0</distortionK1>
          <distortionK2>0.0</distortionK2>
          <distortionK3>0.0</distortionK3>
          <distortionT1>0.0</distortionT1>
          <distortionT2>0.0</distortionT2>
        </plugin> -->
      <!-- Code to use a depth camera (Kinect) -->
      <plugin filename="libgazebo_ros_openni_kinect.so" name="camera_plugin">
        <baseline>0.2</baseline>
        <alwaysOn>true</alwaysOn>
        <updateRate>0.0</updateRate>
        <cameraName>camera_ir</cameraName>
        <imageTopicName>/camera/depth/image_raw</imageTopicName>
        <cameraInfoTopicName>/camera/depth/camera_info</cameraInfoTopicName>
        <depthImageTopicName>/camera/depth/image_raw</depthImageTopicName>
        <depthImageInfoTopicName>/camera/depth/camera_info</depthImageInfoTopicName>
        <pointCloudTopicName>/camera/depth/points</pointCloudTopicName>
        <frameName>camera_link</frameName>
        <pointCloudCutoff>0.05</pointCloudCutoff>
        <distortionK1>0</distortionK1>
        <distortionK2>0</distortionK2>
        <distortionK3>0</distortionK3>
        <distortionT1>0</distortionT1>
        <distortionT2>0</distortionT2>
        <CxPrime>0</CxPrime>
        <Cx>0</Cx>
        <Cy>0</Cy>
        <focalLength>0</focalLength>
        <hackBaseline>0</hackBaseline>
      </plugin>
    </sensor>
  </gazebo>
  <!-- Hokuyo Laser Senso -->
  <link name="hokuyo_link">
    <visual>
      <origin rpy="0 0 0" xyz="0 0 0"/>
      <geometry>
        <box size="0.05 0.05 0.075"/>
      </geometry>
      <!--material name="Blue" /-->
    </visual>
  </link>
  <joint name="hokuyo_joint" type="fixed">
    <origin rpy="0 0 0" xyz="0.28 0 0.3905"/>
    <parent link="base_link"/>
    <child link="hokuyo_link"/>
  </joint>
  <gazebo reference="hokuyo_link">
    <material>Gazebo/Blue</material>
    <turnGravityOff>false</turnGravityOff>
    <sensor name="head_hokuyo_sensor" type="ray">
      <pose>0.025 0 0 0 0 0</pose>
      <visualize>false</visualize>
      <!--visualize>true</visualize-->
      <update_rate>30</update_rate>
      <ray>
        <scan>
          <horizontal>
            <samples>700</samples>
            <resolution>1</resolution>
            <min_angle>-1.570796</min_angle>
            <max_angle>1.570796</max_angle>
          </horizontal>
        </scan>
        <range>
          <min>0.10</min>
          <max>10.0</max>
          <resolution>0.001</resolution>
        </range>
      </ray>
      <plugin filename="libgazebo_ros_laser.so" name="gazebo_ros_head_hokuyo_controller">
        <topicName>scan</topicName>
        <frameName>hokuyo_link</frameName>
      </plugin>
    </sensor>
  </gazebo>
  <!-- Gazebo IMU -->
  <link name="imu_link">
    <visual>
      <origin rpy="0 0 0" xyz="0 0 0"/>
      <geometry>
        <box size="0.025 0.025 0.025"/>
      </geometry>
      <!--material name="Blue" /-->
    </visual>
  </link>
  <joint name="imu_joint" type="fixed">
    <origin rpy="0 0 0" xyz="0 -0.28 0.3905"/>
    <parent link="base_link"/>
    <child link="imu_link"/>
  </joint>
  <gazebo reference="imu_link">
    <material>Gazebo/Red</material>
    <gravity>true</gravity>
    <sensor name="imu_sensor" type="imu">
      <always_on>true</always_on>
      <update_rate>100</update_rate>
      <visualize>true</visualize>
      <topic>&quot;__default_topic__&quot;/</topic>
      <plugin filename="libgazebo_ros_imu_sensor.so" name="imu_plugin">
        <topicName>imu</topicName>
        <bodyName>imu_link</bodyName>
        <updateRateHZ>10.0</updateRateHZ>
        <gaussianNoise>0.0</gaussianNoise>
        <xyzOffset>0 0 0</xyzOffset>
        <rpyOffset>0 0 0</rpyOffset>
        <frameName>imu_link</frameName>
      </plugin>
      <pose>0 0 0 0 0 0</pose>
    </sensor>
  </gazebo>
  <!-- Gazebo GPS -->
  <link name="gps_link">
    <visual>
      <origin rpy="0 0 0" xyz="0 0 0"/>
      <geometry>
        <box size="0.025 0.025 0.025"/>
      </geometry>
      <!--material name="Blue" /-->
    </visual>
  </link>
  <joint name="gps_joint" type="fixed">
    <origin rpy="0 0 0" xyz="0 0.28 0.3905"/>
    <parent link="base_link"/>
    <child link="gps_link"/>
  </joint>
  <gazebo>
    <plugin filename="libhector_gazebo_ros_gps.so" name="gazebo_ros_gps">
      <updateRate>4.0</updateRate>
      <bodyName>gps</bodyName>
      <frameId>gps</frameId>
      <topicName>/gps/fix</topicName>
      <velocityTopicName>/gps/fix_velocity</velocityTopicName>
      <referenceLatitude>-30.06022459407145675</referenceLatitude>
      <referenceLongitude>-51.173913575780311191</referenceLongitude>
      <referenceHeading>90</referenceHeading>
      <referenceAltitude>10</referenceAltitude>
      <offset>0 0 0</offset>
      <drift>0.001 0.001 0.001</drift>
      <gaussianNoise>0.05 0.05 0.05</gaussianNoise>
      <velocityDrift>0.001 0.001 0.001</velocityDrift>
      <velocityGaussianNoise>0.5 0.5 0.5</velocityGaussianNoise>
      <!--                <drift>0.001 0.001 0.001</drift>-->
      <!--                <gaussianNoise>0.01 0.01 0.01</gaussianNoise>-->
      <!--                <velocityDrift>0 0 0</velocityDrift>-->
      <!--                <velocityGaussianNoise>0.05 0.05 0.05</velocityGaussianNoise>-->
    </plugin>
  </gazebo>
</robot>
